const axios = require('axios')
const fs = require('fs')

const dir = './live-questions'

const parseDate = (date) => {
    const y = date.getFullYear()
    const m = date.getMonth() + 1
    const d = date.getDate()

    return `${y}-${m < 10 ? '0' : ''}${m}-${d < 10 ? '0' : ''}${d}`
}

const getUrl = (dateStr) => {
    return `http://s3-sa-east-1.amazonaws.com/trivia-paperx-production/lives/${dateStr}/questions.js`
}

const getAllDateStrOnRange = (start, end) => {
    let response = []

    while (start <= end) {
        start.setDate(start.getDate() + 1)
        const dateStr = parseDate(start)
        response.push(dateStr)
    }

    return response
}

const fetchAndLogData = async (dateStr) => {
    const url = getUrl(dateStr)
    return new Promise(async (resolve, reject) => {
        return await axios.get(url, { timeout: 50000 }).then(res => {
            if (res.status == 200)
                fs.writeFileSync(`${dir}/${dateStr}.js`, res.data)
            const output = `fetching status: OK ... ${dateStr}`
            console.log(output)
            return resolve(output)
        }).catch(err => {
            const output = `fetching status: FAILED ... ${dateStr}`
            console.log(output)
            return resolve(output)
        })
    })
}

const fetchAll = async () => {
    try {
        fs.rmdirSync(dir, { recursive: true })
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir)
            console.log('Folder resetted.')
        }
    } catch (e) {
        console.log('Unable to delete /live-questions folder')
    }

    const dates = getAllDateStrOnRange(new Date('2018-01-01'), new Date())

    console.log('Running promises.')
    const promises = dates.map(fetchAndLogData)
    await Promise.all(promises)
        .then(res => console.log(res.sort()))
        .catch(err => console.log('Error ', err))

    console.log('Finished running promises.')
}

const mergeAllQuestionFiles = () => {
    let questions = []
    const files = fs.readdirSync(dir)
    for (let file of files) {
        const path = `${dir}/${file}`
        try {
            c = require(path)
            c.questions.forEach((question) => questions.push(question))
        } catch (e) {
            console.log('Error merging ... ', path)
        }
    }
    return questions
}

const removeDuplicatesFromMergedQuestions = (questions) => {
    let filteredQuestions = []
    let hashes = {}
    questions.forEach((question) => {
        if (!hashes[question.statement]) {
            hashes[question.statement] = 1
            filteredQuestions.push(question)
        } else
            hashes[question.statement] += 1
    })
    return filteredQuestions
}

run = async () => {
    await fetchAll()

    const questions = mergeAllQuestionFiles()
    const filteredQuestions = removeDuplicatesFromMergedQuestions(questions)

    // console.log(filteredQuestions)
    console.log('Not filtered questions (repeating): ', questions.length)
    console.log('filtered questions (not repeating): ', filteredQuestions.length)

    fs.writeFileSync('output.js', JSON.stringify({ allQuestions: questions }, null, 4))
}

run()
